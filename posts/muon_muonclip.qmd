---
title: "Muon Optimizer"
date: 2025-08-28
categories: [RL, Optimizer]
format:
  pdf:
    include-in-header: preamble.tex
---

![猫猫镇楼](../images/maomao2.png)

这篇博文是讲Muon优化器，Adaptive Moment Estimation

- 你可能收获：一种新的optimzer的原理

- 你很难收获：实践中的应用结果

# Muon Optimizer

**Motivation**：把原始梯度矩阵换成一个正交阵
**方法**：应用Newton-Schulz matrix iteration
**优势**：
- 不用做SVD分解，很方便
- 当前的updates matrics呈现出low-rank matrices，此方法可以增加多样性（和我之前研究相符、值得进一步研究）

## Newton Method：切线找根
![Newton_Method](../images/newton_method.png)

## Newton-Schulz Method：牛顿法的矩阵类似

**Motivation**：把原本的矩阵逐渐迭代成正交阵
**一次迭代**：
$$
\begin{aligned}
G' &:= aG + b(GG^\top)G + c(GG^\top)^2 G \\
   &= (aI + b(GG^\top) + c(GG^\top)^2)G \\
   &= (aI + bUS^2U^\top + cUS^4U^\top)USV^\top \\
   &= U(aS + bS^3 + cS^5)V^\top
\end{aligned}
$$


其中第二行到第三行应用了SVD分解
**原理**：中间的奇异值S逐渐趋近于1
![Newton_Method](../images/newton_schulz_method.png)

## Muon Optimizer

```python
# Pytorch code
def newtonschulz5(G, steps=5, eps=1e-7):
    assert G.ndim == 2
    a, b, c = (3.4445, -4.7750, 2.0315) ------------------------> 满足条件二
    X = G.bfloat16()
    X /= (X.norm() + eps)  -------------------------------------> 满足条件一
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A
        X = a * X + B @ X
    if G.size(0) > G.size(1):
        X = X.T
    return X
```

**应用上述Newton-Schulz的充分条件**：
- 初始G的奇异值范围在[0,1]之间，所以每次会除以F范数 
- 当N趋于1时，(phi(x))^N趋于1，所以需要选择合适的a、b、c
**完整算法**
- 第四行：加momentum
- 第五行：正交化


# MuonClip Optimizer
**Motivation**：修剪更新后的$W_q$\$W_k$矩阵，将其范数控制在1以内


# 关于正交化的讨论

**muon观察到**：用SGD-momentum and Adam更新时得到的梯度矩阵大都是high condition number，也就是最大奇异值和最小奇异值的比值很大。换句话说，可以近似地将梯度矩阵看成一个低秩矩阵，low-rank matrices。

我的上次实验：
![FLowLens](../images/FLowLens.png)

# 来源
- muon: https://kellerjordan.github.io/posts/muon/
- muonclip: https://moonshotai.github.io/Kimi-K2/




